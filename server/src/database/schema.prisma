generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"] // for container deployment
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  uuid           String    @default(uuid()) @db.Uuid
  username       String    @unique
  email          String    @unique
  password       String
  name           String?
  bio            String?
  profilePicture String?
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  followers      User[]    @relation("UserFollows")
  following      User[]    @relation("UserFollows")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  media          Media[]
}

model Post {
  id        Int       @id @default(autoincrement())
  uuid      String    @default(uuid()) @db.Uuid
  title     String
  content   String
  media     Media[]
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @db.Uuid
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @db.Uuid
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, commentId])
}

model Media {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @db.Uuid
  url       String
  type      MediaType
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MediaType {
  POST_PICTURE
  PROFILE_PICTURE
}
